package main
import(
	"encoding/json"
	"reflect"
	"fmt"
)

type AutoGenerated struct {
	Metric struct {
		CmdbServiceName string `json:"cmdb_service_name"`
		Sdu             string `json:"sdu"`
	} `json:"metric"`
	Value []interface{} `json:"value"`
}

type RankReference struct {
	RelAdd string `json:"rel_add"`
	RelLx  string `json:"rel_lx"`
	RelRaw string `json:"rel_raw"`
}

type Config struct {
	ItemSearch ScenarioConfig
}

type ScenarioConfig struct {
	CountryEvaluationAlog map[string] EvaluationAlog
}

type EvaluationAlog struct {
	Control string
	Treatment string
}

func main() {
	//s := `{s"metric":{"cmdb_service_name":"shopee.marketplace.listing.item.productlabel.dataprovider","sdu":"productlabel-dataprovider-live-br"},"value":[1684809930,"0.7857322692871094"]}`
	//var resBody = []byte(s)
	//v := AutoGenerated{}
	//err := json.Unmarshal(resBody, &v)
	//if err != nil {
	//     fmt.Printf("error decoding sakura response: %v\n", err)
	//	     if e, ok := err.(*json.SyntaxError); ok {
	//		     fmt.Printf("syntax error at byte offset %d\n", e.Offset)
	//	     }
	//     fmt.Printf("sakura response: %v\n", resBody)
	//} else {
	//     fmt.Printf("response: %s\n", resBody)
	//}
	s1 := `{"es_rank":284,"es_score":229475.296875,"is_cb_item":false,"merge_rank":284,"queue":85,"rank_rank":20,"rank_references":{"rel_add":"100.020000","rel_lx":"2","rel_raw":"0.640945"},"rank_score":101.14843270220194,"shuffle_rank":0}`
	var ss_info map[string]interface{}
	err := json.Unmarshal([]byte(s1), &ss_info)
	if err != nil {
		fmt.Printf("ss info err = %v\n", err)
	}
	fmt.Printf("rank_references = %v, type = %v\n", ss_info["rank_references"], reflect.TypeOf(ss_info["rank_references"]))
	if value, ok := ss_info["rank_references"].(map[string]interface{}); ok{
		if score, ok := value["rel_add"].(string); ok {
			fmt.Printf("rel_add = %s\n", score)
		}
	}
	var cfg = Config{}
	s2 := `{"ItemSearch":{"CountryEvaluationAlog":{"SG":{"Control":"123","Treatment":"456"},"BR":{"Control":"123","Treatment":"456"},"ID":{"Control":"123","Treatment":"456"},"CL":{"Control":"123","Treatment":"456"}}}}`
	err = json.Unmarshal([]byte(s2), &cfg)
	if err != nil {
		fmt.Printf("Config info err = %v\n", err)
	} else {
		fmt.Printf("Config = %+v\n", cfg)
	}
}

